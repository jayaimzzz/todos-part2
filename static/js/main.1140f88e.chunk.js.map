{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todos","todosList","search","nextID","length","toggleCompleted","todosId","event","index","_this","findIndex","todo","id","newTodoList","slice","completed","setState","deleteTodo","splice","handleLoadSearchResults","target","value","clearCompleted","filter","keyHandling","keyCode","newTodo","userId","title","push","previousState","_this2","this","react_default","a","createElement","className","placeholder","autoFocus","type","onChange","onKeyDown","App_TodoList","map","App_TodoItem","key","onClick","Component","TodoItem","props","defaultChecked","TodoList","children","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1140f88e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./index.css\";\nimport todosList from \"./todos.json\";\n\nclass App extends Component {\n  state = {\n    todos: todosList,\n    search: \"\",\n    nextID: todosList.length + 1\n  };\n\n  toggleCompleted = todosId => event => {\n    let index = this.state.todos.findIndex(todo => todo.id === todosId)\n    let newTodoList = this.state.todos.slice();\n    newTodoList[index].completed = !newTodoList[index].completed;\n    this.setState({ todos: newTodoList });\n  };\n\n  deleteTodo = todosId => event => {\n    let index = this.state.todos.findIndex(todo => todo.id === todosId)\n    let newTodoList = this.state.todos.slice();\n    newTodoList.splice(index,1)\n    this.setState({ todos: newTodoList });\n  }\n  \n  handleLoadSearchResults = event => {\n    this.setState({\n      search: event.target.value\n    });\n  };\n\n  clearCompleted = () => {\n    let newTodoList = this.state.todos.slice();\n    newTodoList = newTodoList.filter(todo => todo.completed === false)\n    this.setState ({ todos: newTodoList })\n  }\n\n  keyHandling = event => {\n    if (event.keyCode === 13) {\n      const newTodo = {\n        userId: 1,\n        id: this.state.nextID,\n        title: this.state.search,\n        completed: false\n      };\n      const newTodoList = this.state.todos.slice();\n      newTodoList.push(newTodo);\n      this.setState(previousState => ({\n        todos: newTodoList,\n        search: \"\",\n        nextID: previousState.nextID + 1\n      }));\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.handleLoadSearchResults}\n            onKeyDown={this.keyHandling}\n          />\n        </header>\n        <TodoList>\n          {this.state.todos.map(todo => (\n            <TodoItem\n              title={todo.title}\n              completed={todo.completed}\n              key={todo.id}\n              toggleCompleted={this.toggleCompleted(todo.id)}\n              deleteTodo={this.deleteTodo(todo.id)}\n            />\n          ))}\n        </TodoList>\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>0</strong> item(s) left\n          </span>\n          <button className=\"clear-completed\" onClick={this.clearCompleted}>Clear completed</button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            defaultChecked={this.props.completed}\n            onClick={this.props.toggleCompleted}\n          />\n          <label>{this.props.title}</label>\n          <button className=\"destroy\" onClick={this.props.deleteTodo}/>\n        </div>\n      </li>\n    );\n  }\n}\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">{this.props.children}</ul>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}